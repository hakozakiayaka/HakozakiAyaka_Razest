//=============================================================================
//
// 背景処理 [bg.cpp]
// Author : Gokan akane
//
//=============================================================================
#include "main.h"
#include "bg.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define STARBG_TEXTUER "data\\TEXTURE\\star.png" //読み込むテクスチャ
#define BG_POS_X (0)					   //背景左上X
#define BG_POS_Y (0)					   //背景左上Y
#define BG_WIDTH (SCREEN_WIDTH)			   //背景の幅
#define BG_HEIGHT (SCREEN_HEIGHT)		   //背景高さ
#define MOVE_STAR (0.0005f)

//*****************************************************************************
// グローバル変数
//*****************************************************************************
LPDIRECT3DTEXTURE9 g_pTextureStarBG= NULL;//テクスチャへのポインタ
LPDIRECT3DVERTEXBUFFER9 g_pVtxBuffStarBG = NULL;
int g_nCntBG = 0;

//=============================================================================
// ポリゴン初期化処理[InitPolygon]
//=============================================================================
void InitStarBG(void)
{
	LPDIRECT3DDEVICE9 pDevice;
	VERTEX_2D*pVtx;//頂点情報へのポインタ

	//デバイスの取得
	pDevice = GetDevice();

	//テクスチャ読み込み
	D3DXCreateTextureFromFile(pDevice, STARBG_TEXTUER, &g_pTextureStarBG);

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&g_pVtxBuffStarBG, NULL);

	//頂点をロックして頂点データへのポインタを取得
	g_pVtxBuffStarBG->Lock(0, 0, (void**)&pVtx, 0);

	//背景の座標設定
	pVtx[0].pos = D3DXVECTOR3(BG_POS_X, BG_POS_Y, 0.0f);//一つ目の頂点の場所指定
	pVtx[1].pos = D3DXVECTOR3(BG_WIDTH, BG_POS_Y, 0.0f);//二つ目の頂点の場所指定（右回り）
	pVtx[2].pos = D3DXVECTOR3(BG_POS_X, BG_HEIGHT, 0.0f);//三つ目の頂点の場所指定（右回り）
	pVtx[3].pos = D3DXVECTOR3(BG_WIDTH, BG_HEIGHT, 0.0f);//三つ目の頂点の場所指定（右回り）

	//rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//背景色設定
	pVtx[0].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);//一つ目の頂点の色指定（右回り）
	pVtx[1].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);//一つ目の頂点の色指定（右回り）
	pVtx[2].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);//一つ目の頂点の色指定（右回り）
	pVtx[3].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);//一つ目の頂点の色指定（右回り）

	//背景テクスチャの設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファのアンロック
	g_pVtxBuffStarBG->Unlock();

}
//=============================================================================
//ポリゴン終了処理 [UninitPolygon]
//=============================================================================
void UninitStarBG(void)
{
	//テクスチャの破棄
	if (g_pTextureStarBG != NULL)
	{
		g_pTextureStarBG->Release();
		g_pTextureStarBG = NULL;
	}


	//頂点バッファの破棄
	if (g_pVtxBuffStarBG != NULL)
	{
		g_pVtxBuffStarBG->Release();
		g_pVtxBuffStarBG = NULL;
	}

}

//=============================================================================
// ポリゴン更新処理[UpdataPolygon]
//=============================================================================
void UpdateStarBG(void)
{
	VERTEX_2D*pVtx;//頂点情報へのポインタ
	g_nCntBG++;

	//頂点をロックして頂点データへのポインタを取得
	g_pVtxBuffStarBG->Lock(0, 0, (void**)&pVtx, 0);

		//背景の座標設定
	pVtx[0].tex = D3DXVECTOR2(0.0f + (g_nCntBG*(MOVE_STAR + 1)), 0.0f );//一つ目の頂点の場所指定
	pVtx[1].tex = D3DXVECTOR2(1.0f + (g_nCntBG*(MOVE_STAR + 1)), 0.0f );//二つ目の頂点の場所指定（右回り）
	pVtx[2].tex = D3DXVECTOR2(0.0f + (g_nCntBG*(MOVE_STAR + 1)), 1.0f );//三つ目の頂点の場所指定（右回り）
	pVtx[3].tex = D3DXVECTOR2(1.0f + (g_nCntBG*(MOVE_STAR + 1)), 1.0f );//三つ目の頂点の場所指定（右回り）

	//頂点バッファのアンロック
	g_pVtxBuffStarBG->Unlock();

}
//=============================================================================
// ポリゴン描写処理[DrawPolygon]
//=============================================================================
void DrawStarBG(void)
{
	LPDIRECT3DDEVICE9 pDevice;

	//デバイスを取得する
	pDevice = GetDevice();

	//頂点バッファをデバイスのデータストリームに設定
	pDevice->SetStreamSource(0, g_pVtxBuffStarBG, 0, sizeof(VERTEX_2D));

	//頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);
	//テクスチャの設定
	pDevice->SetTexture(0, g_pTextureStarBG);

	//ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,
		0, 
		2);
}
